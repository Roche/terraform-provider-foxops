// Package client_v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package client_v1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	StaticTokenHeaderAuthScopes = "StaticTokenHeaderAuth.Scopes"
)

// ApiError defines model for ApiError.
type ApiError struct {
	Message string `json:"message"`
}

// ChangeType An enumeration.
type ChangeType = interface{}

// CreateChangeRequest defines model for CreateChangeRequest.
type CreateChangeRequest struct {
	ChangeType       *ChangeType       `json:"change_type,omitempty"`
	RequestedData    map[string]string `json:"requested_data"`
	RequestedVersion string            `json:"requested_version"`
}

// DesiredIncarnationState A DesiredIncarnationState represents the desired state of an incarnation.
type DesiredIncarnationState struct {
	Automerge                 *bool                                                                `json:"automerge,omitempty"`
	IncarnationRepository     string                                                               `json:"incarnation_repository"`
	TargetDirectory           *string                                                              `json:"target_directory,omitempty"`
	TemplateData              map[string]DesiredIncarnationState_TemplateData_AdditionalProperties `json:"template_data"`
	TemplateRepository        string                                                               `json:"template_repository"`
	TemplateRepositoryVersion string                                                               `json:"template_repository_version"`
}

// DesiredIncarnationStateTemplateData0 defines model for .
type DesiredIncarnationStateTemplateData0 = string

// DesiredIncarnationStateTemplateData1 defines model for .
type DesiredIncarnationStateTemplateData1 = int

// DesiredIncarnationStateTemplateData2 defines model for .
type DesiredIncarnationStateTemplateData2 = float32

// DesiredIncarnationState_TemplateData_AdditionalProperties defines model for DesiredIncarnationState.template_data.AdditionalProperties.
type DesiredIncarnationState_TemplateData_AdditionalProperties struct {
	union json.RawMessage
}

// DesiredIncarnationStatePatch A DesiredIncarnationStatePatch represents the patch for the desired state of an incarnation.
type DesiredIncarnationStatePatch struct {
	Automerge                 bool                                                                       `json:"automerge"`
	TemplateData              *map[string]DesiredIncarnationStatePatch_TemplateData_AdditionalProperties `json:"template_data,omitempty"`
	TemplateRepositoryVersion *string                                                                    `json:"template_repository_version,omitempty"`
}

// DesiredIncarnationStatePatchTemplateData0 defines model for .
type DesiredIncarnationStatePatchTemplateData0 = string

// DesiredIncarnationStatePatchTemplateData1 defines model for .
type DesiredIncarnationStatePatchTemplateData1 = int

// DesiredIncarnationStatePatchTemplateData2 defines model for .
type DesiredIncarnationStatePatchTemplateData2 = float32

// DesiredIncarnationStatePatch_TemplateData_AdditionalProperties defines model for DesiredIncarnationStatePatch.template_data.AdditionalProperties.
type DesiredIncarnationStatePatch_TemplateData_AdditionalProperties struct {
	union json.RawMessage
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// IncarnationBasic defines model for IncarnationBasic.
type IncarnationBasic struct {
	CommitSha             string  `json:"commit_sha"`
	CommitUrl             string  `json:"commit_url"`
	Id                    int     `json:"id"`
	IncarnationRepository string  `json:"incarnation_repository"`
	MergeRequestId        *string `json:"merge_request_id,omitempty"`
	MergeRequestUrl       *string `json:"merge_request_url,omitempty"`
	TargetDirectory       string  `json:"target_directory"`
}

// IncarnationResetRequest defines model for IncarnationResetRequest.
type IncarnationResetRequest struct {
	OverrideTemplateData *map[string]IncarnationResetRequest_OverrideTemplateData_AdditionalProperties `json:"override_template_data,omitempty"`
	OverrideVersion      *string                                                                       `json:"override_version,omitempty"`
}

// IncarnationResetRequestOverrideTemplateData0 defines model for .
type IncarnationResetRequestOverrideTemplateData0 = string

// IncarnationResetRequestOverrideTemplateData1 defines model for .
type IncarnationResetRequestOverrideTemplateData1 = int

// IncarnationResetRequestOverrideTemplateData2 defines model for .
type IncarnationResetRequestOverrideTemplateData2 = float32

// IncarnationResetRequest_OverrideTemplateData_AdditionalProperties defines model for IncarnationResetRequest.override_template_data.AdditionalProperties.
type IncarnationResetRequest_OverrideTemplateData_AdditionalProperties struct {
	union json.RawMessage
}

// IncarnationResetResponse defines model for IncarnationResetResponse.
type IncarnationResetResponse struct {
	IncarnationId   int    `json:"incarnation_id"`
	MergeRequestId  string `json:"merge_request_id"`
	MergeRequestUrl string `json:"merge_request_url"`
}

// IncarnationWithDetails defines model for IncarnationWithDetails.
type IncarnationWithDetails struct {
	CommitSha             string  `json:"commit_sha"`
	CommitUrl             string  `json:"commit_url"`
	Id                    int     `json:"id"`
	IncarnationRepository string  `json:"incarnation_repository"`
	MergeRequestId        *string `json:"merge_request_id,omitempty"`

	// MergeRequestStatus An enumeration.
	MergeRequestStatus *MergeRequestStatus `json:"merge_request_status,omitempty"`
	MergeRequestUrl    *string             `json:"merge_request_url,omitempty"`

	// Status DEPRECATED. Use the 'merge_request_status' field instead.
	Status                        ReconciliationStatus                                                 `json:"status"`
	TargetDirectory               string                                                               `json:"target_directory"`
	TemplateData                  *map[string]IncarnationWithDetails_TemplateData_AdditionalProperties `json:"template_data,omitempty"`
	TemplateRepository            *string                                                              `json:"template_repository,omitempty"`
	TemplateRepositoryVersion     *string                                                              `json:"template_repository_version,omitempty"`
	TemplateRepositoryVersionHash *string                                                              `json:"template_repository_version_hash,omitempty"`
}

// IncarnationWithDetailsTemplateData0 defines model for .
type IncarnationWithDetailsTemplateData0 = string

// IncarnationWithDetailsTemplateData1 defines model for .
type IncarnationWithDetailsTemplateData1 = int

// IncarnationWithDetailsTemplateData2 defines model for .
type IncarnationWithDetailsTemplateData2 = float32

// IncarnationWithDetails_TemplateData_AdditionalProperties defines model for IncarnationWithDetails.template_data.AdditionalProperties.
type IncarnationWithDetails_TemplateData_AdditionalProperties struct {
	union json.RawMessage
}

// MergeRequestStatus An enumeration.
type MergeRequestStatus = interface{}

// ReconciliationStatus An enumeration.
type ReconciliationStatus = interface{}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// ListIncarnationsApiIncarnationsGetParams defines parameters for ListIncarnationsApiIncarnationsGet.
type ListIncarnationsApiIncarnationsGetParams struct {
	IncarnationRepository *string `form:"incarnation_repository,omitempty" json:"incarnation_repository,omitempty"`
	TargetDirectory       *string `form:"target_directory,omitempty" json:"target_directory,omitempty"`
}

// CreateIncarnationApiIncarnationsPostParams defines parameters for CreateIncarnationApiIncarnationsPost.
type CreateIncarnationApiIncarnationsPostParams struct {
	AllowImport *bool `form:"allow_import,omitempty" json:"allow_import,omitempty"`
}

// CreateIncarnationApiIncarnationsPostJSONRequestBody defines body for CreateIncarnationApiIncarnationsPost for application/json ContentType.
type CreateIncarnationApiIncarnationsPostJSONRequestBody = DesiredIncarnationState

// UpdateIncarnationApiIncarnationsIncarnationIdPutJSONRequestBody defines body for UpdateIncarnationApiIncarnationsIncarnationIdPut for application/json ContentType.
type UpdateIncarnationApiIncarnationsIncarnationIdPutJSONRequestBody = DesiredIncarnationStatePatch

// CreateChangeApiIncarnationsIncarnationIdChangesPostJSONRequestBody defines body for CreateChangeApiIncarnationsIncarnationIdChangesPost for application/json ContentType.
type CreateChangeApiIncarnationsIncarnationIdChangesPostJSONRequestBody = CreateChangeRequest

// ResetIncarnationApiIncarnationsIncarnationIdResetPostJSONRequestBody defines body for ResetIncarnationApiIncarnationsIncarnationIdResetPost for application/json ContentType.
type ResetIncarnationApiIncarnationsIncarnationIdResetPostJSONRequestBody = IncarnationResetRequest

// AsDesiredIncarnationStateTemplateData0 returns the union data inside the DesiredIncarnationState_TemplateData_AdditionalProperties as a DesiredIncarnationStateTemplateData0
func (t DesiredIncarnationState_TemplateData_AdditionalProperties) AsDesiredIncarnationStateTemplateData0() (DesiredIncarnationStateTemplateData0, error) {
	var body DesiredIncarnationStateTemplateData0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDesiredIncarnationStateTemplateData0 overwrites any union data inside the DesiredIncarnationState_TemplateData_AdditionalProperties as the provided DesiredIncarnationStateTemplateData0
func (t *DesiredIncarnationState_TemplateData_AdditionalProperties) FromDesiredIncarnationStateTemplateData0(v DesiredIncarnationStateTemplateData0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDesiredIncarnationStateTemplateData0 performs a merge with any union data inside the DesiredIncarnationState_TemplateData_AdditionalProperties, using the provided DesiredIncarnationStateTemplateData0
func (t *DesiredIncarnationState_TemplateData_AdditionalProperties) MergeDesiredIncarnationStateTemplateData0(v DesiredIncarnationStateTemplateData0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDesiredIncarnationStateTemplateData1 returns the union data inside the DesiredIncarnationState_TemplateData_AdditionalProperties as a DesiredIncarnationStateTemplateData1
func (t DesiredIncarnationState_TemplateData_AdditionalProperties) AsDesiredIncarnationStateTemplateData1() (DesiredIncarnationStateTemplateData1, error) {
	var body DesiredIncarnationStateTemplateData1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDesiredIncarnationStateTemplateData1 overwrites any union data inside the DesiredIncarnationState_TemplateData_AdditionalProperties as the provided DesiredIncarnationStateTemplateData1
func (t *DesiredIncarnationState_TemplateData_AdditionalProperties) FromDesiredIncarnationStateTemplateData1(v DesiredIncarnationStateTemplateData1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDesiredIncarnationStateTemplateData1 performs a merge with any union data inside the DesiredIncarnationState_TemplateData_AdditionalProperties, using the provided DesiredIncarnationStateTemplateData1
func (t *DesiredIncarnationState_TemplateData_AdditionalProperties) MergeDesiredIncarnationStateTemplateData1(v DesiredIncarnationStateTemplateData1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDesiredIncarnationStateTemplateData2 returns the union data inside the DesiredIncarnationState_TemplateData_AdditionalProperties as a DesiredIncarnationStateTemplateData2
func (t DesiredIncarnationState_TemplateData_AdditionalProperties) AsDesiredIncarnationStateTemplateData2() (DesiredIncarnationStateTemplateData2, error) {
	var body DesiredIncarnationStateTemplateData2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDesiredIncarnationStateTemplateData2 overwrites any union data inside the DesiredIncarnationState_TemplateData_AdditionalProperties as the provided DesiredIncarnationStateTemplateData2
func (t *DesiredIncarnationState_TemplateData_AdditionalProperties) FromDesiredIncarnationStateTemplateData2(v DesiredIncarnationStateTemplateData2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDesiredIncarnationStateTemplateData2 performs a merge with any union data inside the DesiredIncarnationState_TemplateData_AdditionalProperties, using the provided DesiredIncarnationStateTemplateData2
func (t *DesiredIncarnationState_TemplateData_AdditionalProperties) MergeDesiredIncarnationStateTemplateData2(v DesiredIncarnationStateTemplateData2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DesiredIncarnationState_TemplateData_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DesiredIncarnationState_TemplateData_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDesiredIncarnationStatePatchTemplateData0 returns the union data inside the DesiredIncarnationStatePatch_TemplateData_AdditionalProperties as a DesiredIncarnationStatePatchTemplateData0
func (t DesiredIncarnationStatePatch_TemplateData_AdditionalProperties) AsDesiredIncarnationStatePatchTemplateData0() (DesiredIncarnationStatePatchTemplateData0, error) {
	var body DesiredIncarnationStatePatchTemplateData0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDesiredIncarnationStatePatchTemplateData0 overwrites any union data inside the DesiredIncarnationStatePatch_TemplateData_AdditionalProperties as the provided DesiredIncarnationStatePatchTemplateData0
func (t *DesiredIncarnationStatePatch_TemplateData_AdditionalProperties) FromDesiredIncarnationStatePatchTemplateData0(v DesiredIncarnationStatePatchTemplateData0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDesiredIncarnationStatePatchTemplateData0 performs a merge with any union data inside the DesiredIncarnationStatePatch_TemplateData_AdditionalProperties, using the provided DesiredIncarnationStatePatchTemplateData0
func (t *DesiredIncarnationStatePatch_TemplateData_AdditionalProperties) MergeDesiredIncarnationStatePatchTemplateData0(v DesiredIncarnationStatePatchTemplateData0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDesiredIncarnationStatePatchTemplateData1 returns the union data inside the DesiredIncarnationStatePatch_TemplateData_AdditionalProperties as a DesiredIncarnationStatePatchTemplateData1
func (t DesiredIncarnationStatePatch_TemplateData_AdditionalProperties) AsDesiredIncarnationStatePatchTemplateData1() (DesiredIncarnationStatePatchTemplateData1, error) {
	var body DesiredIncarnationStatePatchTemplateData1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDesiredIncarnationStatePatchTemplateData1 overwrites any union data inside the DesiredIncarnationStatePatch_TemplateData_AdditionalProperties as the provided DesiredIncarnationStatePatchTemplateData1
func (t *DesiredIncarnationStatePatch_TemplateData_AdditionalProperties) FromDesiredIncarnationStatePatchTemplateData1(v DesiredIncarnationStatePatchTemplateData1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDesiredIncarnationStatePatchTemplateData1 performs a merge with any union data inside the DesiredIncarnationStatePatch_TemplateData_AdditionalProperties, using the provided DesiredIncarnationStatePatchTemplateData1
func (t *DesiredIncarnationStatePatch_TemplateData_AdditionalProperties) MergeDesiredIncarnationStatePatchTemplateData1(v DesiredIncarnationStatePatchTemplateData1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDesiredIncarnationStatePatchTemplateData2 returns the union data inside the DesiredIncarnationStatePatch_TemplateData_AdditionalProperties as a DesiredIncarnationStatePatchTemplateData2
func (t DesiredIncarnationStatePatch_TemplateData_AdditionalProperties) AsDesiredIncarnationStatePatchTemplateData2() (DesiredIncarnationStatePatchTemplateData2, error) {
	var body DesiredIncarnationStatePatchTemplateData2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDesiredIncarnationStatePatchTemplateData2 overwrites any union data inside the DesiredIncarnationStatePatch_TemplateData_AdditionalProperties as the provided DesiredIncarnationStatePatchTemplateData2
func (t *DesiredIncarnationStatePatch_TemplateData_AdditionalProperties) FromDesiredIncarnationStatePatchTemplateData2(v DesiredIncarnationStatePatchTemplateData2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDesiredIncarnationStatePatchTemplateData2 performs a merge with any union data inside the DesiredIncarnationStatePatch_TemplateData_AdditionalProperties, using the provided DesiredIncarnationStatePatchTemplateData2
func (t *DesiredIncarnationStatePatch_TemplateData_AdditionalProperties) MergeDesiredIncarnationStatePatchTemplateData2(v DesiredIncarnationStatePatchTemplateData2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DesiredIncarnationStatePatch_TemplateData_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DesiredIncarnationStatePatch_TemplateData_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIncarnationResetRequestOverrideTemplateData0 returns the union data inside the IncarnationResetRequest_OverrideTemplateData_AdditionalProperties as a IncarnationResetRequestOverrideTemplateData0
func (t IncarnationResetRequest_OverrideTemplateData_AdditionalProperties) AsIncarnationResetRequestOverrideTemplateData0() (IncarnationResetRequestOverrideTemplateData0, error) {
	var body IncarnationResetRequestOverrideTemplateData0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncarnationResetRequestOverrideTemplateData0 overwrites any union data inside the IncarnationResetRequest_OverrideTemplateData_AdditionalProperties as the provided IncarnationResetRequestOverrideTemplateData0
func (t *IncarnationResetRequest_OverrideTemplateData_AdditionalProperties) FromIncarnationResetRequestOverrideTemplateData0(v IncarnationResetRequestOverrideTemplateData0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncarnationResetRequestOverrideTemplateData0 performs a merge with any union data inside the IncarnationResetRequest_OverrideTemplateData_AdditionalProperties, using the provided IncarnationResetRequestOverrideTemplateData0
func (t *IncarnationResetRequest_OverrideTemplateData_AdditionalProperties) MergeIncarnationResetRequestOverrideTemplateData0(v IncarnationResetRequestOverrideTemplateData0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsIncarnationResetRequestOverrideTemplateData1 returns the union data inside the IncarnationResetRequest_OverrideTemplateData_AdditionalProperties as a IncarnationResetRequestOverrideTemplateData1
func (t IncarnationResetRequest_OverrideTemplateData_AdditionalProperties) AsIncarnationResetRequestOverrideTemplateData1() (IncarnationResetRequestOverrideTemplateData1, error) {
	var body IncarnationResetRequestOverrideTemplateData1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncarnationResetRequestOverrideTemplateData1 overwrites any union data inside the IncarnationResetRequest_OverrideTemplateData_AdditionalProperties as the provided IncarnationResetRequestOverrideTemplateData1
func (t *IncarnationResetRequest_OverrideTemplateData_AdditionalProperties) FromIncarnationResetRequestOverrideTemplateData1(v IncarnationResetRequestOverrideTemplateData1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncarnationResetRequestOverrideTemplateData1 performs a merge with any union data inside the IncarnationResetRequest_OverrideTemplateData_AdditionalProperties, using the provided IncarnationResetRequestOverrideTemplateData1
func (t *IncarnationResetRequest_OverrideTemplateData_AdditionalProperties) MergeIncarnationResetRequestOverrideTemplateData1(v IncarnationResetRequestOverrideTemplateData1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsIncarnationResetRequestOverrideTemplateData2 returns the union data inside the IncarnationResetRequest_OverrideTemplateData_AdditionalProperties as a IncarnationResetRequestOverrideTemplateData2
func (t IncarnationResetRequest_OverrideTemplateData_AdditionalProperties) AsIncarnationResetRequestOverrideTemplateData2() (IncarnationResetRequestOverrideTemplateData2, error) {
	var body IncarnationResetRequestOverrideTemplateData2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncarnationResetRequestOverrideTemplateData2 overwrites any union data inside the IncarnationResetRequest_OverrideTemplateData_AdditionalProperties as the provided IncarnationResetRequestOverrideTemplateData2
func (t *IncarnationResetRequest_OverrideTemplateData_AdditionalProperties) FromIncarnationResetRequestOverrideTemplateData2(v IncarnationResetRequestOverrideTemplateData2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncarnationResetRequestOverrideTemplateData2 performs a merge with any union data inside the IncarnationResetRequest_OverrideTemplateData_AdditionalProperties, using the provided IncarnationResetRequestOverrideTemplateData2
func (t *IncarnationResetRequest_OverrideTemplateData_AdditionalProperties) MergeIncarnationResetRequestOverrideTemplateData2(v IncarnationResetRequestOverrideTemplateData2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t IncarnationResetRequest_OverrideTemplateData_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IncarnationResetRequest_OverrideTemplateData_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIncarnationWithDetailsTemplateData0 returns the union data inside the IncarnationWithDetails_TemplateData_AdditionalProperties as a IncarnationWithDetailsTemplateData0
func (t IncarnationWithDetails_TemplateData_AdditionalProperties) AsIncarnationWithDetailsTemplateData0() (IncarnationWithDetailsTemplateData0, error) {
	var body IncarnationWithDetailsTemplateData0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncarnationWithDetailsTemplateData0 overwrites any union data inside the IncarnationWithDetails_TemplateData_AdditionalProperties as the provided IncarnationWithDetailsTemplateData0
func (t *IncarnationWithDetails_TemplateData_AdditionalProperties) FromIncarnationWithDetailsTemplateData0(v IncarnationWithDetailsTemplateData0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncarnationWithDetailsTemplateData0 performs a merge with any union data inside the IncarnationWithDetails_TemplateData_AdditionalProperties, using the provided IncarnationWithDetailsTemplateData0
func (t *IncarnationWithDetails_TemplateData_AdditionalProperties) MergeIncarnationWithDetailsTemplateData0(v IncarnationWithDetailsTemplateData0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsIncarnationWithDetailsTemplateData1 returns the union data inside the IncarnationWithDetails_TemplateData_AdditionalProperties as a IncarnationWithDetailsTemplateData1
func (t IncarnationWithDetails_TemplateData_AdditionalProperties) AsIncarnationWithDetailsTemplateData1() (IncarnationWithDetailsTemplateData1, error) {
	var body IncarnationWithDetailsTemplateData1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncarnationWithDetailsTemplateData1 overwrites any union data inside the IncarnationWithDetails_TemplateData_AdditionalProperties as the provided IncarnationWithDetailsTemplateData1
func (t *IncarnationWithDetails_TemplateData_AdditionalProperties) FromIncarnationWithDetailsTemplateData1(v IncarnationWithDetailsTemplateData1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncarnationWithDetailsTemplateData1 performs a merge with any union data inside the IncarnationWithDetails_TemplateData_AdditionalProperties, using the provided IncarnationWithDetailsTemplateData1
func (t *IncarnationWithDetails_TemplateData_AdditionalProperties) MergeIncarnationWithDetailsTemplateData1(v IncarnationWithDetailsTemplateData1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsIncarnationWithDetailsTemplateData2 returns the union data inside the IncarnationWithDetails_TemplateData_AdditionalProperties as a IncarnationWithDetailsTemplateData2
func (t IncarnationWithDetails_TemplateData_AdditionalProperties) AsIncarnationWithDetailsTemplateData2() (IncarnationWithDetailsTemplateData2, error) {
	var body IncarnationWithDetailsTemplateData2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncarnationWithDetailsTemplateData2 overwrites any union data inside the IncarnationWithDetails_TemplateData_AdditionalProperties as the provided IncarnationWithDetailsTemplateData2
func (t *IncarnationWithDetails_TemplateData_AdditionalProperties) FromIncarnationWithDetailsTemplateData2(v IncarnationWithDetailsTemplateData2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncarnationWithDetailsTemplateData2 performs a merge with any union data inside the IncarnationWithDetails_TemplateData_AdditionalProperties, using the provided IncarnationWithDetailsTemplateData2
func (t *IncarnationWithDetails_TemplateData_AdditionalProperties) MergeIncarnationWithDetailsTemplateData2(v IncarnationWithDetailsTemplateData2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t IncarnationWithDetails_TemplateData_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IncarnationWithDetails_TemplateData_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListIncarnationsApiIncarnationsGet request
	ListIncarnationsApiIncarnationsGet(ctx context.Context, params *ListIncarnationsApiIncarnationsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncarnationApiIncarnationsPostWithBody request with any body
	CreateIncarnationApiIncarnationsPostWithBody(ctx context.Context, params *CreateIncarnationApiIncarnationsPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIncarnationApiIncarnationsPost(ctx context.Context, params *CreateIncarnationApiIncarnationsPostParams, body CreateIncarnationApiIncarnationsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncarnationApiIncarnationsIncarnationIdDelete request
	DeleteIncarnationApiIncarnationsIncarnationIdDelete(ctx context.Context, incarnationId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadIncarnationApiIncarnationsIncarnationIdGet request
	ReadIncarnationApiIncarnationsIncarnationIdGet(ctx context.Context, incarnationId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncarnationApiIncarnationsIncarnationIdPutWithBody request with any body
	UpdateIncarnationApiIncarnationsIncarnationIdPutWithBody(ctx context.Context, incarnationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIncarnationApiIncarnationsIncarnationIdPut(ctx context.Context, incarnationId int, body UpdateIncarnationApiIncarnationsIncarnationIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateChangeApiIncarnationsIncarnationIdChangesPostWithBody request with any body
	CreateChangeApiIncarnationsIncarnationIdChangesPostWithBody(ctx context.Context, incarnationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateChangeApiIncarnationsIncarnationIdChangesPost(ctx context.Context, incarnationId int, body CreateChangeApiIncarnationsIncarnationIdChangesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetIncarnationApiIncarnationsIncarnationIdResetPostWithBody request with any body
	ResetIncarnationApiIncarnationsIncarnationIdResetPostWithBody(ctx context.Context, incarnationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResetIncarnationApiIncarnationsIncarnationIdResetPost(ctx context.Context, incarnationId int, body ResetIncarnationApiIncarnationsIncarnationIdResetPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestAuthenticationRouteAuthTestGet request
	TestAuthenticationRouteAuthTestGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersionVersionGet request
	GetVersionVersionGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListIncarnationsApiIncarnationsGet(ctx context.Context, params *ListIncarnationsApiIncarnationsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncarnationsApiIncarnationsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncarnationApiIncarnationsPostWithBody(ctx context.Context, params *CreateIncarnationApiIncarnationsPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncarnationApiIncarnationsPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncarnationApiIncarnationsPost(ctx context.Context, params *CreateIncarnationApiIncarnationsPostParams, body CreateIncarnationApiIncarnationsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncarnationApiIncarnationsPostRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncarnationApiIncarnationsIncarnationIdDelete(ctx context.Context, incarnationId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncarnationApiIncarnationsIncarnationIdDeleteRequest(c.Server, incarnationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadIncarnationApiIncarnationsIncarnationIdGet(ctx context.Context, incarnationId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadIncarnationApiIncarnationsIncarnationIdGetRequest(c.Server, incarnationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncarnationApiIncarnationsIncarnationIdPutWithBody(ctx context.Context, incarnationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncarnationApiIncarnationsIncarnationIdPutRequestWithBody(c.Server, incarnationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncarnationApiIncarnationsIncarnationIdPut(ctx context.Context, incarnationId int, body UpdateIncarnationApiIncarnationsIncarnationIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncarnationApiIncarnationsIncarnationIdPutRequest(c.Server, incarnationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateChangeApiIncarnationsIncarnationIdChangesPostWithBody(ctx context.Context, incarnationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateChangeApiIncarnationsIncarnationIdChangesPostRequestWithBody(c.Server, incarnationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateChangeApiIncarnationsIncarnationIdChangesPost(ctx context.Context, incarnationId int, body CreateChangeApiIncarnationsIncarnationIdChangesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateChangeApiIncarnationsIncarnationIdChangesPostRequest(c.Server, incarnationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetIncarnationApiIncarnationsIncarnationIdResetPostWithBody(ctx context.Context, incarnationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetIncarnationApiIncarnationsIncarnationIdResetPostRequestWithBody(c.Server, incarnationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetIncarnationApiIncarnationsIncarnationIdResetPost(ctx context.Context, incarnationId int, body ResetIncarnationApiIncarnationsIncarnationIdResetPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetIncarnationApiIncarnationsIncarnationIdResetPostRequest(c.Server, incarnationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestAuthenticationRouteAuthTestGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestAuthenticationRouteAuthTestGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersionVersionGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionVersionGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListIncarnationsApiIncarnationsGetRequest generates requests for ListIncarnationsApiIncarnationsGet
func NewListIncarnationsApiIncarnationsGetRequest(server string, params *ListIncarnationsApiIncarnationsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incarnations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncarnationRepository != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incarnation_repository", runtime.ParamLocationQuery, *params.IncarnationRepository); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TargetDirectory != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_directory", runtime.ParamLocationQuery, *params.TargetDirectory); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncarnationApiIncarnationsPostRequest calls the generic CreateIncarnationApiIncarnationsPost builder with application/json body
func NewCreateIncarnationApiIncarnationsPostRequest(server string, params *CreateIncarnationApiIncarnationsPostParams, body CreateIncarnationApiIncarnationsPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIncarnationApiIncarnationsPostRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateIncarnationApiIncarnationsPostRequestWithBody generates requests for CreateIncarnationApiIncarnationsPost with any type of body
func NewCreateIncarnationApiIncarnationsPostRequestWithBody(server string, params *CreateIncarnationApiIncarnationsPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incarnations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AllowImport != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "allow_import", runtime.ParamLocationQuery, *params.AllowImport); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncarnationApiIncarnationsIncarnationIdDeleteRequest generates requests for DeleteIncarnationApiIncarnationsIncarnationIdDelete
func NewDeleteIncarnationApiIncarnationsIncarnationIdDeleteRequest(server string, incarnationId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incarnation_id", runtime.ParamLocationPath, incarnationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incarnations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadIncarnationApiIncarnationsIncarnationIdGetRequest generates requests for ReadIncarnationApiIncarnationsIncarnationIdGet
func NewReadIncarnationApiIncarnationsIncarnationIdGetRequest(server string, incarnationId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incarnation_id", runtime.ParamLocationPath, incarnationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incarnations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncarnationApiIncarnationsIncarnationIdPutRequest calls the generic UpdateIncarnationApiIncarnationsIncarnationIdPut builder with application/json body
func NewUpdateIncarnationApiIncarnationsIncarnationIdPutRequest(server string, incarnationId int, body UpdateIncarnationApiIncarnationsIncarnationIdPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIncarnationApiIncarnationsIncarnationIdPutRequestWithBody(server, incarnationId, "application/json", bodyReader)
}

// NewUpdateIncarnationApiIncarnationsIncarnationIdPutRequestWithBody generates requests for UpdateIncarnationApiIncarnationsIncarnationIdPut with any type of body
func NewUpdateIncarnationApiIncarnationsIncarnationIdPutRequestWithBody(server string, incarnationId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incarnation_id", runtime.ParamLocationPath, incarnationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incarnations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateChangeApiIncarnationsIncarnationIdChangesPostRequest calls the generic CreateChangeApiIncarnationsIncarnationIdChangesPost builder with application/json body
func NewCreateChangeApiIncarnationsIncarnationIdChangesPostRequest(server string, incarnationId int, body CreateChangeApiIncarnationsIncarnationIdChangesPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateChangeApiIncarnationsIncarnationIdChangesPostRequestWithBody(server, incarnationId, "application/json", bodyReader)
}

// NewCreateChangeApiIncarnationsIncarnationIdChangesPostRequestWithBody generates requests for CreateChangeApiIncarnationsIncarnationIdChangesPost with any type of body
func NewCreateChangeApiIncarnationsIncarnationIdChangesPostRequestWithBody(server string, incarnationId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incarnation_id", runtime.ParamLocationPath, incarnationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incarnations/%s/changes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResetIncarnationApiIncarnationsIncarnationIdResetPostRequest calls the generic ResetIncarnationApiIncarnationsIncarnationIdResetPost builder with application/json body
func NewResetIncarnationApiIncarnationsIncarnationIdResetPostRequest(server string, incarnationId int, body ResetIncarnationApiIncarnationsIncarnationIdResetPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResetIncarnationApiIncarnationsIncarnationIdResetPostRequestWithBody(server, incarnationId, "application/json", bodyReader)
}

// NewResetIncarnationApiIncarnationsIncarnationIdResetPostRequestWithBody generates requests for ResetIncarnationApiIncarnationsIncarnationIdResetPost with any type of body
func NewResetIncarnationApiIncarnationsIncarnationIdResetPostRequestWithBody(server string, incarnationId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incarnation_id", runtime.ParamLocationPath, incarnationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incarnations/%s/reset", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestAuthenticationRouteAuthTestGetRequest generates requests for TestAuthenticationRouteAuthTestGet
func NewTestAuthenticationRouteAuthTestGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVersionVersionGetRequest generates requests for GetVersionVersionGet
func NewGetVersionVersionGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListIncarnationsApiIncarnationsGetWithResponse request
	ListIncarnationsApiIncarnationsGetWithResponse(ctx context.Context, params *ListIncarnationsApiIncarnationsGetParams, reqEditors ...RequestEditorFn) (*ListIncarnationsApiIncarnationsGetResponse, error)

	// CreateIncarnationApiIncarnationsPostWithBodyWithResponse request with any body
	CreateIncarnationApiIncarnationsPostWithBodyWithResponse(ctx context.Context, params *CreateIncarnationApiIncarnationsPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncarnationApiIncarnationsPostResponse, error)

	CreateIncarnationApiIncarnationsPostWithResponse(ctx context.Context, params *CreateIncarnationApiIncarnationsPostParams, body CreateIncarnationApiIncarnationsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncarnationApiIncarnationsPostResponse, error)

	// DeleteIncarnationApiIncarnationsIncarnationIdDeleteWithResponse request
	DeleteIncarnationApiIncarnationsIncarnationIdDeleteWithResponse(ctx context.Context, incarnationId int, reqEditors ...RequestEditorFn) (*DeleteIncarnationApiIncarnationsIncarnationIdDeleteResponse, error)

	// ReadIncarnationApiIncarnationsIncarnationIdGetWithResponse request
	ReadIncarnationApiIncarnationsIncarnationIdGetWithResponse(ctx context.Context, incarnationId int, reqEditors ...RequestEditorFn) (*ReadIncarnationApiIncarnationsIncarnationIdGetResponse, error)

	// UpdateIncarnationApiIncarnationsIncarnationIdPutWithBodyWithResponse request with any body
	UpdateIncarnationApiIncarnationsIncarnationIdPutWithBodyWithResponse(ctx context.Context, incarnationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncarnationApiIncarnationsIncarnationIdPutResponse, error)

	UpdateIncarnationApiIncarnationsIncarnationIdPutWithResponse(ctx context.Context, incarnationId int, body UpdateIncarnationApiIncarnationsIncarnationIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncarnationApiIncarnationsIncarnationIdPutResponse, error)

	// CreateChangeApiIncarnationsIncarnationIdChangesPostWithBodyWithResponse request with any body
	CreateChangeApiIncarnationsIncarnationIdChangesPostWithBodyWithResponse(ctx context.Context, incarnationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateChangeApiIncarnationsIncarnationIdChangesPostResponse, error)

	CreateChangeApiIncarnationsIncarnationIdChangesPostWithResponse(ctx context.Context, incarnationId int, body CreateChangeApiIncarnationsIncarnationIdChangesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateChangeApiIncarnationsIncarnationIdChangesPostResponse, error)

	// ResetIncarnationApiIncarnationsIncarnationIdResetPostWithBodyWithResponse request with any body
	ResetIncarnationApiIncarnationsIncarnationIdResetPostWithBodyWithResponse(ctx context.Context, incarnationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetIncarnationApiIncarnationsIncarnationIdResetPostResponse, error)

	ResetIncarnationApiIncarnationsIncarnationIdResetPostWithResponse(ctx context.Context, incarnationId int, body ResetIncarnationApiIncarnationsIncarnationIdResetPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetIncarnationApiIncarnationsIncarnationIdResetPostResponse, error)

	// TestAuthenticationRouteAuthTestGetWithResponse request
	TestAuthenticationRouteAuthTestGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestAuthenticationRouteAuthTestGetResponse, error)

	// GetVersionVersionGetWithResponse request
	GetVersionVersionGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionVersionGetResponse, error)
}

type ListIncarnationsApiIncarnationsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IncarnationBasic
	JSON400      *ApiError
	JSON404      *ApiError
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ListIncarnationsApiIncarnationsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncarnationsApiIncarnationsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncarnationApiIncarnationsPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON201      *IncarnationWithDetails
	JSON409      *ApiError
	JSON422      *HTTPValidationError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r CreateIncarnationApiIncarnationsPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncarnationApiIncarnationsPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncarnationApiIncarnationsIncarnationIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON404      *ApiError
	JSON409      *ApiError
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r DeleteIncarnationApiIncarnationsIncarnationIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncarnationApiIncarnationsIncarnationIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadIncarnationApiIncarnationsIncarnationIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncarnationWithDetails
	JSON404      *ApiError
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ReadIncarnationApiIncarnationsIncarnationIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadIncarnationApiIncarnationsIncarnationIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncarnationApiIncarnationsIncarnationIdPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncarnationWithDetails
	JSON400      *ApiError
	JSON404      *ApiError
	JSON409      *ApiError
	JSON422      *HTTPValidationError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r UpdateIncarnationApiIncarnationsIncarnationIdPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncarnationApiIncarnationsIncarnationIdPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateChangeApiIncarnationsIncarnationIdChangesPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CreateChangeApiIncarnationsIncarnationIdChangesPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateChangeApiIncarnationsIncarnationIdChangesPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetIncarnationApiIncarnationsIncarnationIdResetPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncarnationResetResponse
	JSON404      *ApiError
	JSON422      *ApiError
}

// Status returns HTTPResponse.Status
func (r ResetIncarnationApiIncarnationsIncarnationIdResetPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetIncarnationApiIncarnationsIncarnationIdResetPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestAuthenticationRouteAuthTestGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestAuthenticationRouteAuthTestGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestAuthenticationRouteAuthTestGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionVersionGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVersionVersionGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionVersionGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListIncarnationsApiIncarnationsGetWithResponse request returning *ListIncarnationsApiIncarnationsGetResponse
func (c *ClientWithResponses) ListIncarnationsApiIncarnationsGetWithResponse(ctx context.Context, params *ListIncarnationsApiIncarnationsGetParams, reqEditors ...RequestEditorFn) (*ListIncarnationsApiIncarnationsGetResponse, error) {
	rsp, err := c.ListIncarnationsApiIncarnationsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncarnationsApiIncarnationsGetResponse(rsp)
}

// CreateIncarnationApiIncarnationsPostWithBodyWithResponse request with arbitrary body returning *CreateIncarnationApiIncarnationsPostResponse
func (c *ClientWithResponses) CreateIncarnationApiIncarnationsPostWithBodyWithResponse(ctx context.Context, params *CreateIncarnationApiIncarnationsPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncarnationApiIncarnationsPostResponse, error) {
	rsp, err := c.CreateIncarnationApiIncarnationsPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncarnationApiIncarnationsPostResponse(rsp)
}

func (c *ClientWithResponses) CreateIncarnationApiIncarnationsPostWithResponse(ctx context.Context, params *CreateIncarnationApiIncarnationsPostParams, body CreateIncarnationApiIncarnationsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncarnationApiIncarnationsPostResponse, error) {
	rsp, err := c.CreateIncarnationApiIncarnationsPost(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncarnationApiIncarnationsPostResponse(rsp)
}

// DeleteIncarnationApiIncarnationsIncarnationIdDeleteWithResponse request returning *DeleteIncarnationApiIncarnationsIncarnationIdDeleteResponse
func (c *ClientWithResponses) DeleteIncarnationApiIncarnationsIncarnationIdDeleteWithResponse(ctx context.Context, incarnationId int, reqEditors ...RequestEditorFn) (*DeleteIncarnationApiIncarnationsIncarnationIdDeleteResponse, error) {
	rsp, err := c.DeleteIncarnationApiIncarnationsIncarnationIdDelete(ctx, incarnationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncarnationApiIncarnationsIncarnationIdDeleteResponse(rsp)
}

// ReadIncarnationApiIncarnationsIncarnationIdGetWithResponse request returning *ReadIncarnationApiIncarnationsIncarnationIdGetResponse
func (c *ClientWithResponses) ReadIncarnationApiIncarnationsIncarnationIdGetWithResponse(ctx context.Context, incarnationId int, reqEditors ...RequestEditorFn) (*ReadIncarnationApiIncarnationsIncarnationIdGetResponse, error) {
	rsp, err := c.ReadIncarnationApiIncarnationsIncarnationIdGet(ctx, incarnationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadIncarnationApiIncarnationsIncarnationIdGetResponse(rsp)
}

// UpdateIncarnationApiIncarnationsIncarnationIdPutWithBodyWithResponse request with arbitrary body returning *UpdateIncarnationApiIncarnationsIncarnationIdPutResponse
func (c *ClientWithResponses) UpdateIncarnationApiIncarnationsIncarnationIdPutWithBodyWithResponse(ctx context.Context, incarnationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncarnationApiIncarnationsIncarnationIdPutResponse, error) {
	rsp, err := c.UpdateIncarnationApiIncarnationsIncarnationIdPutWithBody(ctx, incarnationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncarnationApiIncarnationsIncarnationIdPutResponse(rsp)
}

func (c *ClientWithResponses) UpdateIncarnationApiIncarnationsIncarnationIdPutWithResponse(ctx context.Context, incarnationId int, body UpdateIncarnationApiIncarnationsIncarnationIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncarnationApiIncarnationsIncarnationIdPutResponse, error) {
	rsp, err := c.UpdateIncarnationApiIncarnationsIncarnationIdPut(ctx, incarnationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncarnationApiIncarnationsIncarnationIdPutResponse(rsp)
}

// CreateChangeApiIncarnationsIncarnationIdChangesPostWithBodyWithResponse request with arbitrary body returning *CreateChangeApiIncarnationsIncarnationIdChangesPostResponse
func (c *ClientWithResponses) CreateChangeApiIncarnationsIncarnationIdChangesPostWithBodyWithResponse(ctx context.Context, incarnationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateChangeApiIncarnationsIncarnationIdChangesPostResponse, error) {
	rsp, err := c.CreateChangeApiIncarnationsIncarnationIdChangesPostWithBody(ctx, incarnationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateChangeApiIncarnationsIncarnationIdChangesPostResponse(rsp)
}

func (c *ClientWithResponses) CreateChangeApiIncarnationsIncarnationIdChangesPostWithResponse(ctx context.Context, incarnationId int, body CreateChangeApiIncarnationsIncarnationIdChangesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateChangeApiIncarnationsIncarnationIdChangesPostResponse, error) {
	rsp, err := c.CreateChangeApiIncarnationsIncarnationIdChangesPost(ctx, incarnationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateChangeApiIncarnationsIncarnationIdChangesPostResponse(rsp)
}

// ResetIncarnationApiIncarnationsIncarnationIdResetPostWithBodyWithResponse request with arbitrary body returning *ResetIncarnationApiIncarnationsIncarnationIdResetPostResponse
func (c *ClientWithResponses) ResetIncarnationApiIncarnationsIncarnationIdResetPostWithBodyWithResponse(ctx context.Context, incarnationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetIncarnationApiIncarnationsIncarnationIdResetPostResponse, error) {
	rsp, err := c.ResetIncarnationApiIncarnationsIncarnationIdResetPostWithBody(ctx, incarnationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetIncarnationApiIncarnationsIncarnationIdResetPostResponse(rsp)
}

func (c *ClientWithResponses) ResetIncarnationApiIncarnationsIncarnationIdResetPostWithResponse(ctx context.Context, incarnationId int, body ResetIncarnationApiIncarnationsIncarnationIdResetPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetIncarnationApiIncarnationsIncarnationIdResetPostResponse, error) {
	rsp, err := c.ResetIncarnationApiIncarnationsIncarnationIdResetPost(ctx, incarnationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetIncarnationApiIncarnationsIncarnationIdResetPostResponse(rsp)
}

// TestAuthenticationRouteAuthTestGetWithResponse request returning *TestAuthenticationRouteAuthTestGetResponse
func (c *ClientWithResponses) TestAuthenticationRouteAuthTestGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestAuthenticationRouteAuthTestGetResponse, error) {
	rsp, err := c.TestAuthenticationRouteAuthTestGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestAuthenticationRouteAuthTestGetResponse(rsp)
}

// GetVersionVersionGetWithResponse request returning *GetVersionVersionGetResponse
func (c *ClientWithResponses) GetVersionVersionGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionVersionGetResponse, error) {
	rsp, err := c.GetVersionVersionGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionVersionGetResponse(rsp)
}

// ParseListIncarnationsApiIncarnationsGetResponse parses an HTTP response from a ListIncarnationsApiIncarnationsGetWithResponse call
func ParseListIncarnationsApiIncarnationsGetResponse(rsp *http.Response) (*ListIncarnationsApiIncarnationsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncarnationsApiIncarnationsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IncarnationBasic
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateIncarnationApiIncarnationsPostResponse parses an HTTP response from a CreateIncarnationApiIncarnationsPostWithResponse call
func ParseCreateIncarnationApiIncarnationsPostResponse(rsp *http.Response) (*CreateIncarnationApiIncarnationsPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncarnationApiIncarnationsPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IncarnationWithDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteIncarnationApiIncarnationsIncarnationIdDeleteResponse parses an HTTP response from a DeleteIncarnationApiIncarnationsIncarnationIdDeleteWithResponse call
func ParseDeleteIncarnationApiIncarnationsIncarnationIdDeleteResponse(rsp *http.Response) (*DeleteIncarnationApiIncarnationsIncarnationIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncarnationApiIncarnationsIncarnationIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseReadIncarnationApiIncarnationsIncarnationIdGetResponse parses an HTTP response from a ReadIncarnationApiIncarnationsIncarnationIdGetWithResponse call
func ParseReadIncarnationApiIncarnationsIncarnationIdGetResponse(rsp *http.Response) (*ReadIncarnationApiIncarnationsIncarnationIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadIncarnationApiIncarnationsIncarnationIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncarnationWithDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateIncarnationApiIncarnationsIncarnationIdPutResponse parses an HTTP response from a UpdateIncarnationApiIncarnationsIncarnationIdPutWithResponse call
func ParseUpdateIncarnationApiIncarnationsIncarnationIdPutResponse(rsp *http.Response) (*UpdateIncarnationApiIncarnationsIncarnationIdPutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncarnationApiIncarnationsIncarnationIdPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncarnationWithDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateChangeApiIncarnationsIncarnationIdChangesPostResponse parses an HTTP response from a CreateChangeApiIncarnationsIncarnationIdChangesPostWithResponse call
func ParseCreateChangeApiIncarnationsIncarnationIdChangesPostResponse(rsp *http.Response) (*CreateChangeApiIncarnationsIncarnationIdChangesPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateChangeApiIncarnationsIncarnationIdChangesPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseResetIncarnationApiIncarnationsIncarnationIdResetPostResponse parses an HTTP response from a ResetIncarnationApiIncarnationsIncarnationIdResetPostWithResponse call
func ParseResetIncarnationApiIncarnationsIncarnationIdResetPostResponse(rsp *http.Response) (*ResetIncarnationApiIncarnationsIncarnationIdResetPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetIncarnationApiIncarnationsIncarnationIdResetPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncarnationResetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseTestAuthenticationRouteAuthTestGetResponse parses an HTTP response from a TestAuthenticationRouteAuthTestGetWithResponse call
func ParseTestAuthenticationRouteAuthTestGetResponse(rsp *http.Response) (*TestAuthenticationRouteAuthTestGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestAuthenticationRouteAuthTestGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVersionVersionGetResponse parses an HTTP response from a GetVersionVersionGetWithResponse call
func ParseGetVersionVersionGetResponse(rsp *http.Response) (*GetVersionVersionGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionVersionGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
