// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Roche/terraform-provider-foxops/internal/provider (interfaces: FoxopsClient)

// Package mock_provider is a generated GoMock package.
package mock_provider

import (
	context "context"
	reflect "reflect"

	provider "github.com/Roche/terraform-provider-foxops/internal/provider"
	gomock "go.uber.org/mock/gomock"
)

// MockFoxopsClient is a mock of FoxopsClient interface.
type MockFoxopsClient struct {
	ctrl     *gomock.Controller
	recorder *MockFoxopsClientMockRecorder
}

// MockFoxopsClientMockRecorder is the mock recorder for MockFoxopsClient.
type MockFoxopsClientMockRecorder struct {
	mock *MockFoxopsClient
}

// NewMockFoxopsClient creates a new mock instance.
func NewMockFoxopsClient(ctrl *gomock.Controller) *MockFoxopsClient {
	mock := &MockFoxopsClient{ctrl: ctrl}
	mock.recorder = &MockFoxopsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFoxopsClient) EXPECT() *MockFoxopsClientMockRecorder {
	return m.recorder
}

// CreateIncarnation mocks base method.
func (m *MockFoxopsClient) CreateIncarnation(arg0 context.Context, arg1 provider.CreateIncarnationRequest) (provider.Incarnation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIncarnation", arg0, arg1)
	ret0, _ := ret[0].(provider.Incarnation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIncarnation indicates an expected call of CreateIncarnation.
func (mr *MockFoxopsClientMockRecorder) CreateIncarnation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIncarnation", reflect.TypeOf((*MockFoxopsClient)(nil).CreateIncarnation), arg0, arg1)
}

// DeleteIncarnation mocks base method.
func (m *MockFoxopsClient) DeleteIncarnation(arg0 context.Context, arg1 provider.IncarnationId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIncarnation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIncarnation indicates an expected call of DeleteIncarnation.
func (mr *MockFoxopsClientMockRecorder) DeleteIncarnation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIncarnation", reflect.TypeOf((*MockFoxopsClient)(nil).DeleteIncarnation), arg0, arg1)
}

// GetIncarnation mocks base method.
func (m *MockFoxopsClient) GetIncarnation(arg0 context.Context, arg1 provider.IncarnationId) (provider.Incarnation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncarnation", arg0, arg1)
	ret0, _ := ret[0].(provider.Incarnation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncarnation indicates an expected call of GetIncarnation.
func (mr *MockFoxopsClientMockRecorder) GetIncarnation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncarnation", reflect.TypeOf((*MockFoxopsClient)(nil).GetIncarnation), arg0, arg1)
}

// GetIncarnationWithMergeRequestStatus mocks base method.
func (m *MockFoxopsClient) GetIncarnationWithMergeRequestStatus(arg0 context.Context, arg1 provider.IncarnationId, arg2 string) (provider.Incarnation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncarnationWithMergeRequestStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(provider.Incarnation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncarnationWithMergeRequestStatus indicates an expected call of GetIncarnationWithMergeRequestStatus.
func (mr *MockFoxopsClientMockRecorder) GetIncarnationWithMergeRequestStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncarnationWithMergeRequestStatus", reflect.TypeOf((*MockFoxopsClient)(nil).GetIncarnationWithMergeRequestStatus), arg0, arg1, arg2)
}

// UpdateIncarnation mocks base method.
func (m *MockFoxopsClient) UpdateIncarnation(arg0 context.Context, arg1 provider.IncarnationId, arg2 provider.UpdateIncarnationRequest) (provider.Incarnation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIncarnation", arg0, arg1, arg2)
	ret0, _ := ret[0].(provider.Incarnation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIncarnation indicates an expected call of UpdateIncarnation.
func (mr *MockFoxopsClientMockRecorder) UpdateIncarnation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIncarnation", reflect.TypeOf((*MockFoxopsClient)(nil).UpdateIncarnation), arg0, arg1, arg2)
}
